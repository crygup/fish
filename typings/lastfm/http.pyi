"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, Optional, Sequence

import aiohttp

class HTTPClient:
    URL = ...
    def __init__(
        self, api_key: str, session: Optional[aiohttp.ClientSession]
    ) -> None: ...
    async def close(self) -> None: ...
    async def read(self, url: str) -> bytes: ...
    async def request(
        self, method: str, params: Optional[Dict[str, Any]] = ..., **kwargs: Any
    ) -> Dict[str, Any]: ...
    async def add_album_tags(
        self, api_sig: str, sk: str, artist: str, album: str, tags: Sequence[str]
    ) -> None: ...
    async def remove_album_tag(
        self, api_sig: str, sk: str, artist: str, album: str, tag: str
    ) -> None: ...
    async def get_album_info(
        self,
        artist: Optional[str] = ...,
        album: Optional[str] = ...,
        mbid: Optional[str] = ...,
        autocorrect: Optional[bool] = ...,
        username: Optional[str] = ...,
        lang: Optional[str] = ...,
    ) -> Dict[str, Any]: ...
    async def get_album_tags(
        self,
        artist: Optional[str] = ...,
        album: Optional[str] = ...,
        mbid: Optional[str] = ...,
        autocorrect: Optional[bool] = ...,
        user: Optional[str] = ...,
    ) -> Dict[str, Any]: ...
    async def get_album_top_tags(
        self,
        artist: Optional[str] = ...,
        album: Optional[str] = ...,
        mbid: Optional[str] = ...,
        autocorrect: Optional[bool] = ...,
    ) -> Dict[str, Any]: ...
    async def search_albums(
        self, album: str, limit: Optional[int] = ..., page: Optional[int] = ...
    ) -> Dict[str, Any]: ...
    async def add_artist_tags(
        self, api_sig: str, sk: str, artist: str, tags: Sequence[str]
    ) -> None: ...
    async def remove_artist_tag(
        self, api_sig: str, sk: str, artist: str, tag: str
    ) -> None: ...
    async def get_artist_correction(self, artist: str) -> Dict[str, Any]: ...
    async def get_artist_info(
        self,
        artist: Optional[str] = ...,
        mbid: Optional[str] = ...,
        autocorrect: Optional[bool] = ...,
        username: Optional[str] = ...,
        lang: Optional[str] = ...,
    ) -> Dict[str, Any]: ...
    async def get_artist_similar(
        self,
        artist: Optional[str] = ...,
        mbid: Optional[str] = ...,
        autocorrect: Optional[bool] = ...,
        limit: Optional[int] = ...,
    ) -> Dict[str, Any]: ...
    async def get_artist_tags(
        self,
        artist: Optional[str] = ...,
        mbid: Optional[str] = ...,
        autocorrect: Optional[bool] = ...,
        user: Optional[str] = ...,
    ) -> Dict[str, Any]: ...
    async def get_artist_top_albums(
        self,
        artist: Optional[str] = ...,
        mbid: Optional[str] = ...,
        autocorrect: Optional[bool] = ...,
        limit: Optional[int] = ...,
        page: Optional[int] = ...,
    ) -> Dict[str, Any]: ...
    async def get_artist_top_tags(
        self,
        artist: Optional[str] = ...,
        mbid: Optional[str] = ...,
        autocorrect: Optional[bool] = ...,
    ) -> Dict[str, Any]: ...
    async def get_artist_top_tracks(
        self,
        artist: Optional[str] = ...,
        mbid: Optional[str] = ...,
        autocorrect: Optional[bool] = ...,
        limit: Optional[int] = ...,
        page: Optional[int] = ...,
    ) -> Dict[str, Any]: ...
    async def search_artists(
        self, artist: str, limit: Optional[int] = ..., page: Optional[int] = ...
    ) -> Dict[str, Any]: ...
    async def get_chart_top_artists(
        self, limit: Optional[int] = ..., page: Optional[int] = ...
    ) -> Dict[str, Any]: ...
    async def get_chart_top_tags(
        self, limit: Optional[int] = ..., page: Optional[int] = ...
    ) -> Dict[str, Any]: ...
    async def get_chart_top_tracks(
        self, limit: Optional[int] = ..., page: Optional[int] = ...
    ) -> Dict[str, Any]: ...
    async def get_geo_top_artists(
        self, country: str, limit: Optional[int] = ..., page: Optional[int] = ...
    ) -> Dict[str, Any]: ...
    async def get_geo_top_tracks(
        self, country: str, limit: Optional[int] = ..., page: Optional[int] = ...
    ) -> Dict[str, Any]: ...
    async def get_library_artists(
        self, user: str, limit: Optional[int] = ..., page: Optional[int] = ...
    ) -> Dict[str, Any]: ...
    async def get_tag_info(
        self, tag: str, lang: Optional[str] = ...
    ) -> Dict[str, Any]: ...
    async def get_tag_similar(self, tag: str) -> Dict[str, Any]: ...
    async def get_tag_top_albums(
        self, tag: str, limit: Optional[int] = ..., page: Optional[int] = ...
    ) -> Dict[str, Any]: ...
    async def get_tag_top_artists(
        self, tag: str, limit: Optional[int] = ..., page: Optional[int] = ...
    ) -> Dict[str, Any]: ...
    async def get_tag_top_tracks(
        self, tag: str, limit: Optional[int] = ..., page: Optional[int] = ...
    ) -> Dict[str, Any]: ...
    async def get_tag_weekly_chart_list(self, tag: str) -> Dict[str, Any]: ...
    async def add_track_tags(
        self, api_sig: str, sk: str, artist: str, track: str, tags: Sequence[str]
    ) -> Dict[str, Any]: ...
    async def get_track_correction(self, artist: str, track: str) -> Dict[str, Any]: ...
    async def get_track_info(
        self,
        artist: Optional[str] = ...,
        track: Optional[str] = ...,
        mbid: Optional[str] = ...,
        autocorrect: Optional[bool] = ...,
        username: Optional[str] = ...,
    ) -> Dict[str, Any]: ...
    async def get_track_tags(
        self,
        artist: Optional[str] = ...,
        track: Optional[str] = ...,
        mbid: Optional[str] = ...,
        autocorrect: Optional[bool] = ...,
        user: Optional[str] = ...,
    ) -> Dict[str, Any]: ...
    async def get_track_top_tags(
        self,
        artist: Optional[str] = ...,
        track: Optional[str] = ...,
        mbid: Optional[str] = ...,
        autocorrect: Optional[bool] = ...,
    ) -> Dict[str, Any]: ...
    async def love_track(
        self, api_sig: str, sk: str, artist: str, track: str
    ) -> Dict[str, Any]: ...
    async def search_track(
        self, track: str, limit: Optional[int] = ..., page: Optional[int] = ...
    ) -> Dict[str, Any]: ...
    async def unlove_track(
        self, api_sig: str, sk: str, artist: str, track: str
    ) -> Dict[str, Any]: ...
    async def remove_track_tag(
        self, api_sig: str, sk: str, artist: str, track: str, tag: str
    ) -> Dict[str, Any]: ...
    async def get_user_info(self, user: str) -> Dict[str, Any]: ...
    async def get_user_loved_tracks(
        self, user: str, limit: Optional[int] = ..., page: Optional[int] = ...
    ) -> Dict[str, Any]: ...
    async def get_user_friends(
        self, user: str, limit: Optional[int] = ..., page: Optional[int] = ...
    ) -> Dict[str, Any]: ...
    async def get_user_personal_tags(
        self,
        tag: str,
        user: str,
        tagging_type: str,
        limit: Optional[int] = ...,
        page: Optional[int] = ...,
    ) -> Dict[str, Any]: ...
    async def get_user_recent_tracks(
        self,
        user: str,
        limit: Optional[int] = ...,
        page: Optional[int] = ...,
        from_: Optional[int] = ...,
        to: Optional[int] = ...,
        extended: Optional[bool] = ...,
    ) -> Dict[str, Any]: ...
    async def get_user_top_albums(
        self,
        user: str,
        period: Optional[str] = ...,
        limit: Optional[int] = ...,
        page: Optional[int] = ...,
    ) -> Dict[str, Any]: ...
    async def get_user_top_artists(
        self,
        user: str,
        period: Optional[str] = ...,
        limit: Optional[int] = ...,
        page: Optional[int] = ...,
    ) -> Dict[str, Any]: ...
    async def get_user_top_tags(
        self, user: str, limit: Optional[int] = ...
    ) -> Dict[str, Any]: ...
    async def get_user_top_tracks(
        self,
        user: str,
        period: Optional[str] = ...,
        limit: Optional[int] = ...,
        page: Optional[int] = ...,
    ) -> Dict[str, Any]: ...
    async def get_user_weekly_album_chart(
        self, user: str, from_: Optional[int] = ..., to: Optional[int] = ...
    ) -> Dict[str, Any]: ...
    async def get_user_weekly_artist_chart(
        self, user: str, from_: Optional[int] = ..., to: Optional[int] = ...
    ) -> Dict[str, Any]: ...
    async def get_user_weekly_chart_list(self, user: str) -> Dict[str, Any]: ...
    async def get_user_weekly_track_chart(
        self, user: str, from_: Optional[int] = ..., to: Optional[int] = ...
    ) -> Dict[str, Any]: ...
