"""
This type stub file was generated by pyright.
"""

from abc import ABC, abstractmethod
from typing import (TYPE_CHECKING, Any, Generator, Generic, List, Optional,
                    Protocol, TypeVar)

from typing_extensions import Self

if TYPE_CHECKING: ...
T = TypeVar("T")
M = TypeVar("M")
__all__ = ("Paginator",)

class PaginatorCallback(Protocol, Generic[T]):
    async def __call__(self, *args: Any, page: int, limit: int) -> List[T]: ...

class EmptyPage(Exception): ...
class MaxReached(Exception): ...

class AbstractPaginator(ABC, Generic[T]):
    items: List[T]
    @abstractmethod
    async def next(self) -> List[T]: ...
    async def all(self) -> List[T]: ...
    def __await__(self) -> Generator[None, None, List[T]]: ...
    def __aiter__(self) -> Self: ...
    async def __anext__(self) -> T: ...

class Paginator(AbstractPaginator[T]):
    MAX_PAGES = ...
    __slots__ = ...
    def __init__(
        self,
        callback: PaginatorCallback[T],
        limit: int = ...,
        max: Optional[int] = ...,
        *args: Any,
        **kwargs: Any
    ) -> None: ...
    def __repr__(self): ...
    def __len__(self): ...
    async def next(self) -> List[T]: ...
